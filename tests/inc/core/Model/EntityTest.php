<?php

namespace Runalyze\Model;

class Object_MockTester extends Entity {
	public function properties() {
		return array('a', 'b', 'c');
	}
}

class ObjectWithArrays_MockTester extends Entity {
	public function properties() {
		return array ('a', 'b', 'c');
	}

	public function isArray($key) {
		return ($key == 'b');
	}

	protected function canSet($key) {
		return ($key != 'c');
	}
}

class ObjectWithEmptyNumerics_MockTester extends Entity {
	public function properties() {
		return array ('int', 'string');
	}

	public function synchronize($default = 0) {
		$this->ensureNumericValue('int', $default);
	}
}

/**
 * Generated by hand
 */
class EntityTest extends \PHPUnit_Framework_TestCase {

	public function testStaticArrayMethods() {
		$TestArray = array(1, 2, 3);
		$this->assertEquals( $TestArray, Entity::explode(Entity::implode($TestArray)) );
	}

	public function testSimpleObject() {
		$O = new Object_MockTester(array(
			'a' => 1,
			'b' => '',
			'c' => true
		));

		$this->assertEquals(1, $O->get('a'));
		$this->assertEquals('', $O->get('b'));
		$this->assertEquals(true, $O->get('c'));

		$this->assertEquals(true, $O->has('a'));
		$this->assertEquals(false, $O->has('b'));
		$this->assertEquals(true, $O->has('c'));

		$this->assertEquals(array(
			'a' => 1,
			'b' => '',
			'c' => true
		), $O->completeData());

		$this->assertEquals(0, $O->num());
	}

	public function testSimpleObjectWithArray() {
		$O = new ObjectWithArrays_MockTester(array(
			'a' => 1,
			'b' => array(1, 2, 3),
			'c' => true
		));

		$this->assertEquals(array(1,2,3), $O->get('b'));
		$this->assertTrue($O->has('b'));
		$this->assertEquals(3, $O->num());

		$O->set('b', array());
		$this->assertFalse($O->has('b'));
		$this->assertEquals(0, $O->num());
	}

	public function testClearing() {
		$O = new ObjectWithArrays_MockTester(array(
			'a' => 1,
			'b' => array(1, 2, 3),
			'c' => true
		));

		$O->clear();

		$this->assertEmpty($O->get('a'));
		$this->assertEmpty($O->get('b'));
		$this->assertEmpty($O->get('c'));

		$this->assertTrue($O->isEmpty());
	}

	public function testSimpleObjectWithArrayAsString() {
		$O = new ObjectWithArrays_MockTester(array(
			'b' => '1'.Entity::ARRAY_SEPARATOR.'2'.Entity::ARRAY_SEPARATOR.'3'
		));

		$this->assertEquals(array(1,2,3), $O->get('b'));
	}

	public function testDefaultValues() {
		$O = new ObjectWithArrays_MockTester();

		$this->assertEquals('', $O->get('a'));
		$this->assertEquals(array(), $O->get('b'));
		$this->assertEquals('', $O->get('c'));

		$this->assertTrue($O->isEmpty());
	}

	/**
	 * @expectedException \InvalidArgumentException
	 */
	public function testHasException() {
		$O = new Object_MockTester();
		$O->has('foo');
	}

	/**
	 * @expectedException \InvalidArgumentException
	 */
	public function testGetException() {
		$O = new Object_MockTester();
		$O->get('foo');
	}

	/**
	 * @expectedException \InvalidArgumentException
	 */
	public function testSetException() {
		$O = new Object_MockTester();
		$O->set('foo', 'bar');
	}

	/**
	 * @expectedException \InvalidArgumentException
	 */
	public function testInvalidSetException() {
		$O = new ObjectWithArrays_MockTester();
		$O->set('c', 'd');
	}

	/**
	 * @expectedException \RuntimeException
	 */
	public function testArraySetException() {
		$O = new ObjectWithArrays_MockTester();
		$O->set('b', 'no-array');
	}

	public function testEnsuringNumericalValues() {
		$O = new ObjectWithEmptyNumerics_MockTester();
		$this->assertEquals('', $O->get('int'));

		$O->synchronize();
		$this->assertEquals(0, $O->get('int'));
		$this->assertEquals('', $O->get('string'));

		$O->set('int', 3.14);
		$O->synchronize();
		$this->assertEquals(3.14, $O->get('int'));

		$O->set('int', '');
		$O->synchronize(1);
		$this->assertEquals(1, $O->get('int'));
	}

}
