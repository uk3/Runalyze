<?php

namespace Runalyze\Model;

class StringArrayObject_MockTester extends StringArrayObject {}

/**
 * Generated by hand
 */
class StringArrayObjectTest extends \PHPUnit_Framework_TestCase {

	public function testArrayConstructor() {
		$Array = new StringArrayObject_MockTester(array('foo', 'bar'));

		$this->assertEquals(2, $Array->num());
		$this->assertEquals('foo', $Array->at(0));
		$this->assertEquals('bar', $Array->at(1));
		$this->assertEquals(array('foo', 'bar'), $Array->asArray());
	}

	public function testStringConstructor() {
		$Array = new StringArrayObject_MockTester('[1,2,3]');

		$this->assertEquals(3, $Array->num());
		$this->assertEquals(array(1,2,3), $Array->asArray());
	}

	public function testFromAssociativeString() {
		$Array = new StringArrayObject_MockTester('{"a":"foo","b":"bar"}');

		$this->assertEquals(2, $Array->num());
		$this->assertEquals(array('a' => 'foo', 'b' => 'bar'), $Array->asArray());
	}

	public function testAddingElements() {
		$Array = new StringArrayObject_MockTester();

		$this->assertTrue($Array->isEmpty());

		$Array->add('foo');
		$Array->add('bar');

		$this->assertFalse($Array->isEmpty());
		$this->assertEquals(2, $Array->num());
	}

	public function testClearing() {
		$Array = new StringArrayObject_MockTester(array(1,2,3));
		$Array->clear();

		$this->assertTrue($Array->isEmpty());
		$this->assertEquals(0, $Array->num());
	}

	/**
	 * @expectedException \InvalidArgumentException
	 */
	public function testException() {
		$Array = new StringArrayObject_MockTester();
		$Array->at(0);
	}

}
